/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog, HTTPRequest } from "@boundaryml/baml"
import { toBamlError, BamlStream, BamlAbortError, Collector } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {EmotionalState, EscalationLevel, NegotiationResponse, PaymentPlanValidity, SecurityThreatLevel, UserIntent} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type TickReason = "Unknown";

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
  signal?: AbortSignal
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  async AnalyzeNegotiationResponse(
      user_message: string,current_offer: string,negotiation_history: string,emotional_state: string,security_context: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.NegotiationResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.AnalyzeNegotiationResponse(
          user_message,current_offer,negotiation_history,emotional_state,security_context,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "AnalyzeNegotiationResponse",
        {
          "user_message": user_message,"current_offer": current_offer,"negotiation_history": negotiation_history,"emotional_state": emotional_state,"security_context": security_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.NegotiationResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async AnalyzeUserIntent(
      user_message: string,conversation_history: string,previous_offers: string[],negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): Promise<types.UserIntent> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.AnalyzeUserIntent(
          user_message,conversation_history,previous_offers,negotiation_attempts,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "AnalyzeUserIntent",
        {
          "user_message": user_message,"conversation_history": conversation_history,"previous_offers": previous_offers,"negotiation_attempts": negotiation_attempts
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.UserIntent
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async AssessComplianceRisk(
      conversation_content: string,proposed_action: string,user_emotional_state: string,regulatory_context: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.EscalationLevel> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.AssessComplianceRisk(
          conversation_content,proposed_action,user_emotional_state,regulatory_context,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "AssessComplianceRisk",
        {
          "conversation_content": conversation_content,"proposed_action": proposed_action,"user_emotional_state": user_emotional_state,"regulatory_context": regulatory_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.EscalationLevel
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async AssessEmotionalState(
      user_message: string,conversation_tone: string,previous_emotional_indicators: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.EmotionalState> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.AssessEmotionalState(
          user_message,conversation_tone,previous_emotional_indicators,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "AssessEmotionalState",
        {
          "user_message": user_message,"conversation_tone": conversation_tone,"previous_emotional_indicators": previous_emotional_indicators
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.EmotionalState
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DetectSecurityThreats(
      user_message: string,conversation_history: string,system_context: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.SecurityThreatLevel> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.DetectSecurityThreats(
          user_message,conversation_history,system_context,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "DetectSecurityThreats",
        {
          "user_message": user_message,"conversation_history": conversation_history,"system_context": system_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.SecurityThreatLevel
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DetermineNextAction(
      current_state: string,user_intent: string,negotiation_attempts: number,emotional_state: string,security_assessment: string,compliance_status: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.DetermineNextAction(
          current_state,user_intent,negotiation_attempts,emotional_state,security_assessment,compliance_status,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "DetermineNextAction",
        {
          "current_state": current_state,"user_intent": user_intent,"negotiation_attempts": negotiation_attempts,"emotional_state": emotional_state,"security_assessment": security_assessment,"compliance_status": compliance_status
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateContextualOpening(
      user_first_message: string,classified_intent: string,emotional_state: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.GenerateContextualOpening(
          user_first_message,classified_intent,emotional_state,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateContextualOpening",
        {
          "user_first_message": user_first_message,"classified_intent": classified_intent,"emotional_state": emotional_state
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateEmpathicResponse(
      user_emotional_state: string,user_message: string,negotiation_context: string,compliance_requirements: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.GenerateEmpathicResponse(
          user_emotional_state,user_message,negotiation_context,compliance_requirements,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateEmpathicResponse",
        {
          "user_emotional_state": user_emotional_state,"user_message": user_message,"negotiation_context": negotiation_context,"compliance_requirements": compliance_requirements
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateNegotiationResponse(
      user_message: string,conversation_history: string,user_intent: string,emotional_state: string,negotiation_context: string,current_offer: string,negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.GenerateNegotiationResponse(
          user_message,conversation_history,user_intent,emotional_state,negotiation_context,current_offer,negotiation_attempts,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateNegotiationResponse",
        {
          "user_message": user_message,"conversation_history": conversation_history,"user_intent": user_intent,"emotional_state": emotional_state,"negotiation_context": negotiation_context,"current_offer": current_offer,"negotiation_attempts": negotiation_attempts
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ValidatePaymentPlan(
      proposed_payment: string,total_debt: number,user_financial_context: string,emotional_state: string,negotiation_history: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.PaymentPlanValidity> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.ValidatePaymentPlan(
          proposed_payment,total_debt,user_financial_context,emotional_state,negotiation_history,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "ValidatePaymentPlan",
        {
          "proposed_payment": proposed_payment,"total_debt": total_debt,"user_financial_context": user_financial_context,"emotional_state": emotional_state,"negotiation_history": negotiation_history
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.PaymentPlanValidity
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  
  AnalyzeNegotiationResponse(
      user_message: string,current_offer: string,negotiation_history: string,emotional_state: string,security_context: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<types.NegotiationResponse, types.NegotiationResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for AnalyzeNegotiationResponse", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "AnalyzeNegotiationResponse",
        {
          "user_message": user_message,"current_offer": current_offer,"negotiation_history": negotiation_history,"emotional_state": emotional_state,"security_context": security_context
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<types.NegotiationResponse, types.NegotiationResponse>(
        raw,
        (a): types.NegotiationResponse => a,
        (a): types.NegotiationResponse => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeUserIntent(
      user_message: string,conversation_history: string,previous_offers: string[],negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): BamlStream<types.UserIntent, types.UserIntent> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for AnalyzeUserIntent", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "AnalyzeUserIntent",
        {
          "user_message": user_message,"conversation_history": conversation_history,"previous_offers": previous_offers,"negotiation_attempts": negotiation_attempts
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<types.UserIntent, types.UserIntent>(
        raw,
        (a): types.UserIntent => a,
        (a): types.UserIntent => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AssessComplianceRisk(
      conversation_content: string,proposed_action: string,user_emotional_state: string,regulatory_context: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<types.EscalationLevel, types.EscalationLevel> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for AssessComplianceRisk", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "AssessComplianceRisk",
        {
          "conversation_content": conversation_content,"proposed_action": proposed_action,"user_emotional_state": user_emotional_state,"regulatory_context": regulatory_context
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<types.EscalationLevel, types.EscalationLevel>(
        raw,
        (a): types.EscalationLevel => a,
        (a): types.EscalationLevel => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AssessEmotionalState(
      user_message: string,conversation_tone: string,previous_emotional_indicators: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<types.EmotionalState, types.EmotionalState> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for AssessEmotionalState", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "AssessEmotionalState",
        {
          "user_message": user_message,"conversation_tone": conversation_tone,"previous_emotional_indicators": previous_emotional_indicators
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<types.EmotionalState, types.EmotionalState>(
        raw,
        (a): types.EmotionalState => a,
        (a): types.EmotionalState => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetectSecurityThreats(
      user_message: string,conversation_history: string,system_context: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<types.SecurityThreatLevel, types.SecurityThreatLevel> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for DetectSecurityThreats", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "DetectSecurityThreats",
        {
          "user_message": user_message,"conversation_history": conversation_history,"system_context": system_context
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<types.SecurityThreatLevel, types.SecurityThreatLevel>(
        raw,
        (a): types.SecurityThreatLevel => a,
        (a): types.SecurityThreatLevel => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetermineNextAction(
      current_state: string,user_intent: string,negotiation_attempts: number,emotional_state: string,security_assessment: string,compliance_status: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for DetermineNextAction", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "DetermineNextAction",
        {
          "current_state": current_state,"user_intent": user_intent,"negotiation_attempts": negotiation_attempts,"emotional_state": emotional_state,"security_assessment": security_assessment,"compliance_status": compliance_status
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateContextualOpening(
      user_first_message: string,classified_intent: string,emotional_state: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for GenerateContextualOpening", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateContextualOpening",
        {
          "user_first_message": user_first_message,"classified_intent": classified_intent,"emotional_state": emotional_state
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEmpathicResponse(
      user_emotional_state: string,user_message: string,negotiation_context: string,compliance_requirements: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for GenerateEmpathicResponse", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateEmpathicResponse",
        {
          "user_emotional_state": user_emotional_state,"user_message": user_message,"negotiation_context": negotiation_context,"compliance_requirements": compliance_requirements
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNegotiationResponse(
      user_message: string,conversation_history: string,user_intent: string,emotional_state: string,negotiation_context: string,current_offer: string,negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for GenerateNegotiationResponse", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateNegotiationResponse",
        {
          "user_message": user_message,"conversation_history": conversation_history,"user_intent": user_intent,"emotional_state": emotional_state,"negotiation_context": negotiation_context,"current_offer": current_offer,"negotiation_attempts": negotiation_attempts
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidatePaymentPlan(
      proposed_payment: string,total_debt: number,user_financial_context: string,emotional_state: string,negotiation_history: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<types.PaymentPlanValidity, types.PaymentPlanValidity> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for ValidatePaymentPlan", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "ValidatePaymentPlan",
        {
          "proposed_payment": proposed_payment,"total_debt": total_debt,"user_financial_context": user_financial_context,"emotional_state": emotional_state,"negotiation_history": negotiation_history
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<types.PaymentPlanValidity, types.PaymentPlanValidity>(
        raw,
        (a): types.PaymentPlanValidity => a,
        (a): types.PaymentPlanValidity => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)