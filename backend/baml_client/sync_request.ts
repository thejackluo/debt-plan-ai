/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {EmotionalState, EscalationLevel, NegotiationResponse, PaymentPlanValidity, SecurityThreatLevel, UserIntent} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
}

export class HttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeNegotiationResponse(
      user_message: string,current_offer: string,negotiation_history: string,emotional_state: string,security_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AnalyzeNegotiationResponse",
        {
          "user_message": user_message,"current_offer": current_offer,"negotiation_history": negotiation_history,"emotional_state": emotional_state,"security_context": security_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeUserIntent(
      user_message: string,conversation_history: string,previous_offers: string[],negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AnalyzeUserIntent",
        {
          "user_message": user_message,"conversation_history": conversation_history,"previous_offers": previous_offers,"negotiation_attempts": negotiation_attempts
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AssessComplianceRisk(
      conversation_content: string,proposed_action: string,user_emotional_state: string,regulatory_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AssessComplianceRisk",
        {
          "conversation_content": conversation_content,"proposed_action": proposed_action,"user_emotional_state": user_emotional_state,"regulatory_context": regulatory_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AssessEmotionalState(
      user_message: string,conversation_tone: string,previous_emotional_indicators: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AssessEmotionalState",
        {
          "user_message": user_message,"conversation_tone": conversation_tone,"previous_emotional_indicators": previous_emotional_indicators
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetectSecurityThreats(
      user_message: string,conversation_history: string,system_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "DetectSecurityThreats",
        {
          "user_message": user_message,"conversation_history": conversation_history,"system_context": system_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetermineNextAction(
      current_state: string,user_intent: string,negotiation_attempts: number,emotional_state: string,security_assessment: string,compliance_status: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "DetermineNextAction",
        {
          "current_state": current_state,"user_intent": user_intent,"negotiation_attempts": negotiation_attempts,"emotional_state": emotional_state,"security_assessment": security_assessment,"compliance_status": compliance_status
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateContextualOpening(
      user_first_message: string,classified_intent: string,emotional_state: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "GenerateContextualOpening",
        {
          "user_first_message": user_first_message,"classified_intent": classified_intent,"emotional_state": emotional_state
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEmpathicResponse(
      user_emotional_state: string,user_message: string,negotiation_context: string,compliance_requirements: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "GenerateEmpathicResponse",
        {
          "user_emotional_state": user_emotional_state,"user_message": user_message,"negotiation_context": negotiation_context,"compliance_requirements": compliance_requirements
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNegotiationResponse(
      user_message: string,conversation_history: string,user_intent: string,emotional_state: string,negotiation_context: string,current_offer: string,negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "GenerateNegotiationResponse",
        {
          "user_message": user_message,"conversation_history": conversation_history,"user_intent": user_intent,"emotional_state": emotional_state,"negotiation_context": negotiation_context,"current_offer": current_offer,"negotiation_attempts": negotiation_attempts
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidatePaymentPlan(
      proposed_payment: string,total_debt: number,user_financial_context: string,emotional_state: string,negotiation_history: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "ValidatePaymentPlan",
        {
          "proposed_payment": proposed_payment,"total_debt": total_debt,"user_financial_context": user_financial_context,"emotional_state": emotional_state,"negotiation_history": negotiation_history
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class HttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeNegotiationResponse(
      user_message: string,current_offer: string,negotiation_history: string,emotional_state: string,security_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AnalyzeNegotiationResponse",
        {
          "user_message": user_message,"current_offer": current_offer,"negotiation_history": negotiation_history,"emotional_state": emotional_state,"security_context": security_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AnalyzeUserIntent(
      user_message: string,conversation_history: string,previous_offers: string[],negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AnalyzeUserIntent",
        {
          "user_message": user_message,"conversation_history": conversation_history,"previous_offers": previous_offers,"negotiation_attempts": negotiation_attempts
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AssessComplianceRisk(
      conversation_content: string,proposed_action: string,user_emotional_state: string,regulatory_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AssessComplianceRisk",
        {
          "conversation_content": conversation_content,"proposed_action": proposed_action,"user_emotional_state": user_emotional_state,"regulatory_context": regulatory_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  AssessEmotionalState(
      user_message: string,conversation_tone: string,previous_emotional_indicators: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "AssessEmotionalState",
        {
          "user_message": user_message,"conversation_tone": conversation_tone,"previous_emotional_indicators": previous_emotional_indicators
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetectSecurityThreats(
      user_message: string,conversation_history: string,system_context: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "DetectSecurityThreats",
        {
          "user_message": user_message,"conversation_history": conversation_history,"system_context": system_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetermineNextAction(
      current_state: string,user_intent: string,negotiation_attempts: number,emotional_state: string,security_assessment: string,compliance_status: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "DetermineNextAction",
        {
          "current_state": current_state,"user_intent": user_intent,"negotiation_attempts": negotiation_attempts,"emotional_state": emotional_state,"security_assessment": security_assessment,"compliance_status": compliance_status
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateContextualOpening(
      user_first_message: string,classified_intent: string,emotional_state: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "GenerateContextualOpening",
        {
          "user_first_message": user_first_message,"classified_intent": classified_intent,"emotional_state": emotional_state
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEmpathicResponse(
      user_emotional_state: string,user_message: string,negotiation_context: string,compliance_requirements: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "GenerateEmpathicResponse",
        {
          "user_emotional_state": user_emotional_state,"user_message": user_message,"negotiation_context": negotiation_context,"compliance_requirements": compliance_requirements
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNegotiationResponse(
      user_message: string,conversation_history: string,user_intent: string,emotional_state: string,negotiation_context: string,current_offer: string,negotiation_attempts: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "GenerateNegotiationResponse",
        {
          "user_message": user_message,"conversation_history": conversation_history,"user_intent": user_intent,"emotional_state": emotional_state,"negotiation_context": negotiation_context,"current_offer": current_offer,"negotiation_attempts": negotiation_attempts
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidatePaymentPlan(
      proposed_payment: string,total_debt: number,user_financial_context: string,emotional_state: string,negotiation_history: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return this.runtime.buildRequestSync(
        "ValidatePaymentPlan",
        {
          "proposed_payment": proposed_payment,"total_debt": total_debt,"user_financial_context": user_financial_context,"emotional_state": emotional_state,"negotiation_history": negotiation_history
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}