/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum EmotionalState {
  Calm = "Calm",
  Frustrated = "Frustrated",
  Stressed = "Stressed",
  Angry = "Angry",
  Overwhelmed = "Overwhelmed",
  Desperate = "Desperate",
  Defiant = "Defiant",
  Manipulative = "Manipulative",
}

export enum EscalationLevel {
  None = "None",
  SupervisorReview = "SupervisorReview",
  ImmediateEscalation = "ImmediateEscalation",
  ComplianceAlert = "ComplianceAlert",
  SecurityAlert = "SecurityAlert",
}

export enum NegotiationResponse {
  Accepted = "Accepted",
  CounterOfferReasonable = "CounterOfferReasonable",
  CounterOfferUnrealistic = "CounterOfferUnrealistic",
  RejectedPolitely = "RejectedPolitely",
  RejectedHostile = "RejectedHostile",
  PromptInjection = "PromptInjection",
  StallTactic = "StallTactic",
  ComplianceViolation = "ComplianceViolation",
}

export enum PaymentPlanValidity {
  Reasonable = "Reasonable",
  Borderline = "Borderline",
  Unrealistic = "Unrealistic",
  PredatoryRisk = "PredatoryRisk",
  ComplianceRisk = "ComplianceRisk",
}

export enum SecurityThreatLevel {
  Safe = "Safe",
  SuspiciousLanguage = "SuspiciousLanguage",
  AttemptedManipulation = "AttemptedManipulation",
  ActiveThreat = "ActiveThreat",
  ComplianceRisk = "ComplianceRisk",
}

export enum UserIntent {
  WillingPayer = "WillingPayer",
  CooperativeNegotiator = "CooperativeNegotiator",
  ResistantNegotiator = "ResistantNegotiator",
  EmotionalDistressed = "EmotionalDistressed",
  NoDebtClaimant = "NoDebtClaimant",
  Stonewaller = "Stonewaller",
  PromptInjector = "PromptInjector",
  BargainHunter = "BargainHunter",
  SplitPaymentProposer = "SplitPaymentProposer",
  GoodFaithPromiser = "GoodFaithPromiser",
}
